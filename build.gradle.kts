plugins {
    kotlin("jvm") version "1.9.21"
    application
}

val javaDestDir = "src/main/java/com/kosta/pp1"
val byteCodeDir = layout.buildDirectory.dir("generated").get().asFile.absolutePath
val byteCodeFilePath = "$byteCodeDir/program.obj"

group = "org.example"
version = "1.0-SNAPSHOT"

repositories {
    mavenCentral()
}

dependencies {
    testImplementation("org.jetbrains.kotlin:kotlin-test")
    implementation(fileTree("lib") { include("*.jar") })
}

tasks.test {
    useJUnitPlatform()
}
kotlin {
    jvmToolchain(17)
}

tasks.register<Delete>("cleanAll") {
    description = "deletes files generated by JFlex and CUP"
    group = "cleanup"

    delete(
        file("$javaDestDir/ast"),
        file("$javaDestDir/sym.java"),
        file("$javaDestDir/MJParser.java"),
    )

}


tasks.register<JavaExec>("generateParser") {
    dependsOn("cleanAll")
    description = "Generates parser using CUP."
    group = "code generation"

    // Path to the CUP JAR
    classpath = files("lib/cup_v10k.jar")  // Manages classpath properly

    // Set the main class to execute inside the JAR
    mainClass.set("java_cup.Main")  // CUP's entry point

    // Pass arguments to CUP
    args(
        "-destdir", javaDestDir,
        "-ast", "$javaDestDir.ast",
        "-parser", "MJParser",
        "-buildtree",
        "spec/mjparser.cup"
    )
}


tasks.register("repackageParser") {
    description = "fixes package names due to a known bug."
    group = "code generation"
    dependsOn("generateParser")
    val sourceDir = file("$javaDestDir/ast")
    inputs.dir(sourceDir)
    doLast {
        val token = "src/main/java/com/kosta/pp1.ast"
        val replacement = "com.kosta.pp1.ast"
        sourceDir.walkTopDown().filter { it.isFile }.forEach { file ->
            logger.info("replacing")
            val content = file.readText()
            val updatedContent = content.replace(token, replacement)
            file.writeText(updatedContent)
        }
    }
}



tasks.register<JavaExec>("generateLexer") {
    description = "Generates lexer using JFlex."
    group = "code generation"
    dependsOn("repackageParser")

    // Set the JAR file as the classpath
    classpath = files("lib/JFlex.jar")


    // Arguments for JFlex
    args(
        "-d", javaDestDir,  // Output directory
        "./spec/mjlexer.lex"  // Lexer specification file
    )
}

tasks.register<JavaExec>("disasm") {
    description = "Bytecode disassembler"
    group = "code generation"
    classpath = files("lib/mj-runtime-1.1.jar") // Better classpath handling
    mainClass.set("rs.etf.pp1.mj.runtime.disasm")
    args(byteCodeFilePath)
}

tasks.register<JavaExec>("runProgram"){
    description = "runs the bytecode on MicroJVM"
    group = "code generation"
    dependsOn("debugProgram")
        classpath = files("lib/mj-runtime-1.1.jar")
        mainClass.set("rs.etf.pp1.mj.runtime.Run")
        args(byteCodeFilePath)
}

tasks.register<JavaExec>("debugProgram"){
    description = "runs the bytecode on MicroJVM in debug mode"
    group = "code generation"
    dependsOn("run")
    classpath = files("lib/mj-runtime-1.1.jar")
    mainClass.set("rs.etf.pp1.mj.runtime.Run")
    args(byteCodeFilePath,"-debug")
}

application {
    mainClass.set("com.kosta.pp1.core.CompilerKt")
}